{"version":3,"sources":["utils/Gis.js","constants/alarm-constants.js","constants/notification-constants.js","services/MockedTimeService.js","services/TimeFormatter.js","services/LocationTracker.js","components/map-view/MapView.js","components/route-details-view/RouteDetailsView.js","actions/alarm-actions.js","actions/notification-actions.js","components/loading-popup/LoadingPopup.js","constants/nearby-trips-constants.js","constants/geolocation-constants.js","constants/select-trip-constants.js","components/route-chooser-popup/RouteChooserPopup.js","actions/nearby-trips-actions.js","actions/select-trip-actions.js","actions/geolocation-actions.js","components/app/App.js","services/OnTransitService.js","sagas/nearby-trips-sagas.js","services/GeolocationTracker.js","sagas/geolocation-sagas.js","sagas/select-trip-sagas.js","utils/CreateReducer.js","reducers/nearby-trips-reducer.js","reducers/geolocation-reducer.js","reducers/select-trip-reducer.js","services/AlarmsManager.js","reducers/alarm-reducer.js","reducers/notification-reducer.js","reducers/root-reducer.js","store/store.js","index.js"],"names":["module","exports","EARTH_RADIUS","convertDegreesToRadians","degrees","Math","PI","convertRadiansToDegrees","radians","computeBearings","lat1","long1","lat2","long2","y","sin","cos","x","bearingInRadans","atan2","this","calculateDestinationPoint","lat","long","bearing","distance","latInRads","longInRads","angularDistance","bearingInRads","lat2InRads","asin","lat2InDegrees","long2InRads","calculateDistance","dLat","dLong","lat1_rads","lat2_rads","a","pow","c","sqrt","types","numSeconds","numMinutes","numHours","prevTime","Date","getCurrentTime","hoursString","toString","padStart","minutesString","secondsString","getFormattedTime","numHrsRemaining","trunc","numMinRemaining","remainingTimeValue","remainingTimeUnit","value","unit","getTimeInSeconds","dateObject","numHrsFromMidnight","getHours","numMinFromHr","getMinutes","getSeconds","setInterval","newTime","timeDiffInMs","getTime","GIS","require","predictLocation","path","startPathIndex","endPathIndex","ratio","distanceToTravel","startIndex","endIndex","totalDistance","i","curPathLocation","nextPathLocation","computeTotalDistanceBetweenPath","closestPathIndex","curDistance","closestPath","nextPath","getNearestPathLocation","location","curIndex","minIndex","maxIndex","minDistance","Infinity","length","getLocationOnPath","stops","time","adjacentStopIndexes","left","right","mid","floor","nextMid","stopA","stopB","Error","findBoundaryBetweenTwoStops","leftStop","rightStop","MapView","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","latitude","longitude","startPredictedLocationWatch","liveLocationWatch","stopLiveLocationWatch","currentTimeInSeconds","predictedLocation","setState","prevState","objectSpread","clearInterval","createStopsLayer","stopsStyle","OlStyle","image","OlCircleStyle","radius","fill","stroke","Stroke","color","width","OlVectorLayer","source","OlVectorSource","style","feature","updateStopsLayer","newStops","geoJsonObject","type","crs","properties","name","features","map","item","geometry","coordinates","fromLonLat","olStopsLayer","getSource","clear","addFeatures","OlGeoJSON","readFeatures","refresh","createPathLayer","pathStyle","OlStroke","updatePathLayer","newPath","olPathLayer","addFeature","readFeature","createLiveLocationLayer","liveLocationStyle","updateLiveLocationLayer","newLatitude","newLongitude","olLiveLocationLayer","updateMap","oldProps","newProps","oldState","newState","olMap","newViewOptions","tripDetailsAdded","tripDetailsRemoved","sumOfAllPathLatitudes","reduce","curSum","sumOfAllPathLongitudes","midPathLatitude","midPathLongitude","center","duration","zoom","olView","animate","curLatitude","curLongitude","OlView","OlMap","target","layers","OlTileLayer","OlOSM","loadTilesWhileAnimating","view","nextProps","nextState","updateDimensions","_this2","setTimeout","updateSize","react_default","createElement","id","className","React","Component","connect","selectedTrip","tripDetails","RouteDetailsView","lastUpdated","stopsWithAlarms","updateStops","currentTime","updatedStops","stop","index","stopIndex","filter","formattedRemainingTime","hasAlarm","undefined","alarms","remainingTime","addAlarm","dispatchTime","max","createAlarm","message","concat","createNotification","newStopsWithAlarms","assign","prevProps","removeAlarm","deleteAlarm","onAlarmButtonClick","renderListItem","key","onClick","timer","stopListItems","tripShortName","tripLongName","mapDispatchToProps","dispatcher","payload","shortName","longName","tripHeadSign","headSign","LoadingPopup","FETCH_NEARBY_TRIPS","FETCH_NEARBY_TRIPS_IN_PROGRESS","FETCH_NEARBY_TRIPS_SUCCESS","FETCH_NEARBY_TRIPS_FAILURE","START_TRACKING_CURRENT_LOCATION","STOP_TRACKING_CURRENT_LOCATION","CURRENT_LOCATION_CHANGED","FETCH_TRIP_DETAILS","FETCH_TRIP_DETAILS_IN_PROGRESS","FETCH_TRIP_DETAILS_SUCCESS","FETCH_TRIP_DETAILS_FAILURE","NearbyTripsChooserPopup","handleSubmit","event","preventDefault","tokenizedCheckboxValue","route","split","selectedTripID","selectedScheduleID","selectTrip","renderLoadingSign","components_loading_popup_LoadingPopup","renderNoNearbyTripsPopup","renderNearbyTripsPopup","onSubmit","keys","nearbyTrips","tripID","trip","shortname","longname","headsign","schedules","scheduleID","display","trim","checkboxValue","startTrackingLocation","stopTrackingLocation","toLocaleTimeString","getNearbyTrips","nearbyTripsInProgress","selectedTripsInProgress","tripIDs","inProgress","currentLocation","App","dispatchNotification","Notification","requestPermission","then","permission","notification","close","catch","console","log","toast","position","POSITION","BOTTOM_CENTER","window","alert","startAlarm","stopAlarm","notifications","text","displayTripDetails","components_route_details_view_RouteDetailsView","components_map_view_MapView","route_chooser_popup_RouteChooserPopup","lib","removeNotification","Axios","defaults","timeout","TRIPS_LOCATOR_URL","TRIP_DETAILS_URL","_x","_x2","_x3","_x4","_getNearbyTrips","apply","arguments","_callee","options","rawData","regenerator_default","wrap","_context","prev","next","params","get","sent","abrupt","data","t0","getTripDetails","_x5","_x6","_getTripDetails","_callee2","url","_context2","_ref","result","put","getNearbyTripsByAPI","_marked","nearby_trips_sagas_callee","takeLatest","_marked2","watchOptions","enableHighAccuracy","maximumAge","locationWatch","startLocationWatch","callbacks","onSuccess","onError","navigator","geolocation","watchPosition","stopLocationWatch","onLocationChangedSuccess","payloadObj","coords","accuracy","store","dispatch","onLocationChangedError","error","watchCallbacks","geolocation_sagas_marked","geolocation_sagas_marked2","geolocation_sagas_callee","_context3","_marked3","_payload","getTripDetailsFromApi","select_trip_sagas_marked","select_trip_sagas_callee","select_trip_sagas_marked2","createReducer","initialState","actionHandlers","action","hasOwnProperty","_createReducer","defineProperty","_ref2","_ref3","select_trip_reducer_createReducer","alarmWatch","getAlarms","isAlarmRunning","alarm_reducer_createReducer","deleteAlarmFromManager","curTime","notification_reducer_createReducer","combineReducers","nearbyTripsReducer","selectedTripReducer","currentLocationReducer","alarmsReducer","notificationsReducer","rootSagas","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","applyMiddleware","all","routeChooserSagas","locationSagas","selectTripSagas","store_marked","run","ReactDOM","render","es","components_app_App","document","getElementById"],"mappings":"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","file":"static/js/main.584f3ca7.chunk.js","sourcesContent":["/**\n * A library used to perform GPS location calculations\n */\nmodule.exports = {\n    EARTH_RADIUS: 6371000, // in meters\n\n    /**\n     * Converts an angle from degrees to radians\n     * @param {Float} degrees Angle in degrees\n     * @returns {Float} Angle in radians\n     */\n    convertDegreesToRadians: function(degrees){\n        return degrees * Math.PI / 180;\n    },\n\n    /**\n     * Converts an angle from radians to degrees\n     * @param {Float} radians Angle in radians\n     * @returns {Float} Angle in degrees\n     */\n    convertRadiansToDegrees: function(radians){\n        return (radians * 180) / Math.PI;\n    },\n\n    /**\n     * Computes the bearing from the first GPS location to the last GPS location in degrees\n     * @param {Float} lat1 The latitude of the first GPS location in degrees\n     * @param {Float} long1 The longitude of the first GPS location in degrees\n     * @param {Float} lat2 The latitude of the last GPS location in degrees\n     * @param {Float} long2 The longitude of the last GPS location in degrees\n     * @returns {Float} The bearing from the first GPS location to the last GPS location.\n     */\n    computeBearings: function(lat1, long1, lat2, long2){\n        let y = Math.sin(long2 - long1) * Math.cos(lat2);\n        let x = (Math.cos(lat1) * Math.sin(lat2)) - \n                (Math.sin(lat1) * Math.cos(lat2) * Math.cos(long2 - long1));\n        let bearingInRadans = Math.atan2(y, x);\n        let bearingInDegrees = this.convertRadiansToDegrees(bearingInRadans);\n        return (bearingInDegrees + 180) % 360;\n    },\n\n    /**\n     * Calculates the approximate location X distance away from a GPS location with a \n     * certain bearing from that GPS location.\n     * \n     * It will return an object with the following structure:\n     * {\n     *      lat: <latitude of approximate location>\n     *      long: <longitude of approximate location>\n     * }\n     * \n     * @param {Float} lat The latitude of the GPS location in degrees\n     * @param {Float} long The longitude of the GPS location in degrees\n     * @param {Float} bearing The bearing in degrees\n     * @param {Float} distance The distance in meters\n     * @returns {Object} The approximate location.\n     */\n    calculateDestinationPoint: function(lat, long, bearing, distance){\n        let latInRads = this.convertDegreesToRadians(lat);\n        let longInRads = this.convertDegreesToRadians(long);\n\n        let angularDistance = distance / this.EARTH_RADIUS;\n        let bearingInRads = this.convertDegreesToRadians(bearing);\n\n        let lat2InRads = Math.asin(Math.sin(latInRads) * Math.cos(angularDistance) + \n                        Math.cos(latInRads) * Math.sin(angularDistance) * Math.cos(bearingInRads));\n        let lat2InDegrees = this.convertRadiansToDegrees(lat2InRads);\n\n        let y = Math.sin(bearingInRads) * Math.sin(angularDistance) * Math.cos(latInRads);\n        let x = Math.cos(angularDistance) - Math.sin(latInRads) * Math.sin(lat2InRads);\n        let long2InRads = longInRads + Math.atan2(y, x);\n        \n        \n        let long2InDegrees = this.convertRadiansToDegrees(long2InRads);\n        let normalizedLong2InDegrees = (long2InDegrees + 540) % 360 - 180;\n        \n        return {\n            lat: lat2InDegrees,\n            long: normalizedLong2InDegrees\n        };\n    },\n\n    /**\n     * Computes the distance between two GPS locations. It takes Earth's radius\n     * into account.\n     * @param {Float} lat1 The latitude of the first GPS location in radians\n     * @param {Float} long1 The longitude of the first GPS location in radians\n     * @param {Float} lat2 The latitude of the second GPS location in radians\n     * @param {Float} long2 The longitude of the second GPS location in radians\n     * @returns {Float} The distance between two GPS locations.\n     */\n    calculateDistance: function(lat1, long1, lat2, long2){\n        var dLat = this.convertDegreesToRadians(lat2 - lat1);\n        var dLong = this.convertDegreesToRadians(long2 - long1);\n        var lat1_rads = this.convertDegreesToRadians(lat1);\n        var lat2_rads = this.convertDegreesToRadians(lat2);\n\n        var a = Math.pow(Math.sin(dLat / 2), 2) +\n                Math.pow(Math.sin(dLong / 2), 2) * \n                Math.cos(lat1_rads) * Math.cos(lat2_rads); \n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n        return this.EARTH_RADIUS * c;\n    }\n};","export const types = {\n    CREATE_NEW_ALARM: \"services/alarms/CREATE_NEW_ALARM\",\n    DELETE_ALARM: \"services/alarms/DELETE_ALARM\",\n    START_ALARM: \"services/alarms/START_ALARM\",\n    STOP_ALARM: \"services/alarms/STOP_ALARM\",\n    DISPATCH_ALARM: \"services/alarms/DISPATCH_ALARM\"\n};\n","export const types = {\n    DISPATCH_NOTIFICATION: \"notifications/DISPATCH_NOTIFICATIONS\",\n    REMOVE_NOTIFICATION: \"notifications/REMOVE_NOTIFICATION\"\n};","\nvar numSeconds = 0;\nvar numMinutes = 4;\nvar numHours = 10;\n\nvar prevTime = new Date();\n\nexport function getCurrentTime(){\n    let hoursString = numHours.toString().padStart(2, \"0\");\n    let minutesString = numMinutes.toString().padStart(2, \"0\");\n    let secondsString = numSeconds.toString().padStart(2, \"0\");\n\n    let timeInString = hoursString + \":\" + minutesString + \":\" + secondsString;\n    let dateString = \"August 19, 1975 \" + timeInString;\n\n    let fakeDate = new Date(dateString);\n    return fakeDate;\n}\n\nsetInterval(() => {\n\n    let newTime = new Date();\n    if (newTime !== prevTime){\n        let timeDiffInMs = newTime.getTime() - prevTime.getTime();\n        let timeDiffInSeconds = timeDiffInMs / 1000;\n\n        numSeconds += timeDiffInSeconds;\n\n        if (numSeconds >= 60){\n            numSeconds = 0;\n            numMinutes ++;  \n        }\n\n        if (numMinutes >= 60){\n            numMinutes = 0;\n            numHours ++;\n        }\n\n        if (numHours >= 24){\n            numHours = 0;\n        }\n\n        prevTime = newTime;\n    }\n});","\n/**\n * Formats the number of seconds to its most appropriate unit of time.\n * @param {Integer} numSeconds The number of seconds\n */\nexport function getFormattedTime(numSeconds) {\n    let numHrsRemaining = Math.trunc(numSeconds / 3600);\n    numSeconds = numSeconds % 3600;\n    \n    let numMinRemaining = Math.trunc(numSeconds / 60);\n    numSeconds = numSeconds % 60;\n\n    let remainingTimeValue = \"\";\n    let remainingTimeUnit = \"hours\";\n    if (numHrsRemaining >= 1){\n        if (numHrsRemaining === 1 && numMinRemaining === 0){\n            remainingTimeValue = \"1\";\n            remainingTimeUnit = \"hour\";\n        }\n        else{\n            remainingTimeValue = numHrsRemaining + \":\" + Math.trunc(numMinRemaining).toString().padStart(2, \"0\");\n            remainingTimeUnit = \"hours\";\n        }\n    }\n    else if (numMinRemaining >= 1){\n        if (numMinRemaining === 1 && numSeconds === 0){\n            remainingTimeValue = \"1\";\n            remainingTimeUnit = \"minute\";\n        }\n        else{\n            remainingTimeValue = numMinRemaining + \":\" + Math.trunc(numSeconds).toString().padStart(2, \"0\");\n            remainingTimeUnit = \"minutes\";\n        }\n    }\n    else {\n        if (numSeconds === 1){\n            remainingTimeValue = \"1\";\n            remainingTimeUnit = \"second\";\n        }\n        else{\n            remainingTimeValue = numSeconds.toString();\n            remainingTimeUnit = \"seconds\";\n        }\n    }\n\n    return {\n        value: remainingTimeValue,\n        unit: remainingTimeUnit\n    };\n}\n\n/**\n * Returns the number of seconds from midnight a date object \n * @param {Date} dateObject A date object\n */\nexport function getTimeInSeconds(dateObject){\n    let numHrsFromMidnight = dateObject.getHours();\n    let numMinFromHr = dateObject.getMinutes();\n    let numSecFromMin = dateObject.getSeconds();\n    return numSecFromMin + (60 * numMinFromHr) + (3600 * numHrsFromMidnight);\n}","const GIS = require(\"../utils/Gis\");\n\n/**\n * Returns two indexes, i and i + 1 where stops[i].time <= time && time <= stops[i + 1].time.\n * Pre-condition: stops must contain the following structure:\n *  [{\n *      lat: <latitude of stop in radians>\n *      long: <longitude of stop in radians>\n *      time: <expected time of bus / train to arrive at in seconds after midnight>\n *   }, \n *   ...\n *  ]\n * @param {Object[]} stops A list of stops sorted by time in ascending order\n * @param {Integer} time The time in seconds after midnight\n */\nfunction findBoundaryBetweenTwoStops(stops, time){\n    let left = 0;\n    let right = stops.length;\n\n    while(left <= right){\n        let mid = Math.floor((left + right) / 2);\n        let nextMid = mid + 1;\n\n        let stopA = stops[mid];\n        let stopB = stops[nextMid];\n\n        if (stopA.time <= time && time <= stopB.time){\n            return [mid, nextMid];\n        }\n        else if (time < stopA.time){\n            right = mid - 1;\n        }\n        else{\n            left = mid + 1;\n        }\n    }\n    throw new Error(\"Cannot find boundary between two stops!\");\n}\n\n/**\n * Computes the total distance of a path segment from path[startIndex] \n * to path[endIndex] not including path[endIndex]\n * @param {Object[]} path A list of path locations in order\n * @param {*} startIndex The index to the start of a path segment\n * @param {*} endIndex The index to the end of a path segment\n * @returns {Float} The total distance of a path segment\n */\nfunction computeTotalDistanceBetweenPath(path, startIndex, endIndex){\n    let totalDistance = 0;\n    for (let i = startIndex; i < endIndex; i++){\n        let curPathLocation = path[i];\n        let nextPathLocation = path[i + 1];\n\n        let lat1 = curPathLocation.lat;\n        let long1 = curPathLocation.long;\n        let lat2 = nextPathLocation.lat;\n        let long2 = nextPathLocation.long;\n        let curDistance = GIS.calculateDistance(lat1, long1, lat2, long2);\n\n        totalDistance += curDistance;\n    }\n    return totalDistance;\n}\n\n/**\n * Predicts the location in a path segment given the amount already travelled in the path segment.\n * @param {Object[]} path A set of coordinates in sorted form which outlines the path.\n * @param {Integer} startPathIndex The index to the start of a path segment in path[]\n * @param {Integer} endPathIndex The index to the end of a path segment in path[]\n * @param {Float} ratio The current amount of distance already travelled from the start \n *      of the path to the end of the path segment.\n */\nfunction predictLocation(path, startPathIndex, endPathIndex, ratio){\n    let totalDistanceOfPath = computeTotalDistanceBetweenPath(path, startPathIndex, endPathIndex);\n    let distanceToTravel = totalDistanceOfPath * ratio;\n\n    /**\n     * Get the path index \"closestPathIndex\" s.t. the predicted location is between \n     * path[closestPathIndex] and path[closestPathIndex + 1] inclusive.\n     */\n    let closestPathIndex = startPathIndex;\n    while(closestPathIndex < endPathIndex){\n        let curPathLocation = path[closestPathIndex];\n        let nextPathLocation = path[closestPathIndex + 1];\n\n        let lat1 = curPathLocation.lat;\n        let long1 = curPathLocation.long;\n        let lat2 = nextPathLocation.lat;\n        let long2 = nextPathLocation.long;\n        let curDistance = GIS.calculateDistance(lat1, long1, lat2, long2);\n\n        if (distanceToTravel - curDistance < 0){\n            break;\n        }\n        distanceToTravel -= curDistance;\n        closestPathIndex ++;\n    }\n\n    // Get the predicted location between path[closestPathIndex] and path[closestPathIndex + 1]\n    if (closestPathIndex === endPathIndex){\n        return {\n            lat: path[closestPathIndex].lat,\n            long: path[closestPathIndex].long\n        };\n    }\n    else{\n        let closestPath = path[closestPathIndex];\n        let nextPath = path[closestPathIndex + 1];\n\n        let bearing = GIS.computeBearings(nextPath.lat, nextPath.long, closestPath.lat, closestPath.long);\n        return GIS.calculateDestinationPoint(closestPath.lat, closestPath.long, bearing, distanceToTravel);\n    }\n}\n\nfunction getNearestPathLocation(location, path){\n    let curIndex = 0;\n    let minIndex = 0;\n    let maxIndex = 0;\n    let minDistance = Infinity;\n    while (curIndex < path.length){\n        let curPathLocation = path[curIndex];\n        let curDistance = GIS.calculateDistance(location.lat, location.long, curPathLocation.lat, curPathLocation.long);\n\n        if (curDistance < minDistance){\n            minDistance = curDistance;\n            minIndex = curIndex;\n            maxIndex = curIndex;\n        }\n        else if (curDistance - minDistance < 0.000000000001){\n            maxIndex = curIndex;\n        }\n\n        curIndex ++;\n    }\n    return {\n        minIndex: minIndex,\n        maxIndex: maxIndex\n    };\n}\n\nexport function getLocationOnPath(stops, path, time){\n    let adjacentStopIndexes = findBoundaryBetweenTwoStops(stops, time);\n    let leftStop = stops[adjacentStopIndexes[0]];\n    let rightStop = stops[adjacentStopIndexes[1]];\n    let startPathIndex = getNearestPathLocation(leftStop, path).minIndex;\n    let endPathIndex = getNearestPathLocation(rightStop, path).maxIndex;\n\n    let ratio = (time - leftStop.time) / (rightStop.time - leftStop.time);\n    let predictedLocation = predictLocation(path, startPathIndex, endPathIndex, ratio);\n\n    return predictedLocation;\n}","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./MapView.css\";\nimport { getCurrentTime } from \"../../services/MockedTimeService\";\nimport { getTimeInSeconds } from \"../../services/TimeFormatter\";\nimport { getLocationOnPath } from \"../../services/LocationTracker\";\n\n// Imports for the map\nimport \"ol/ol.css\";\nimport {fromLonLat} from \"ol/proj.js\";\nimport {Map as OlMap, View as OlView} from \"ol\";\nimport {Tile as OlTileLayer, Vector as OlVectorLayer} from \"ol/layer.js\";\nimport OlOSM from \"ol/source/OSM.js\";\n\n// For drawing objects on the map\nimport OlVectorSource from \"ol/source/Vector.js\";\nimport OlGeoJSON from \"ol/format/GeoJSON.js\";\nimport OlStroke from \"ol/style/Stroke\";\nimport OlStyle from \"ol/style/Style\";\nimport OlCircleStyle from \"ol/style/Circle\";\nimport Stroke from \"ol/style/Stroke\";\n\n/**\n * A component which displays the map to the user\n * It uses OpenLayers as the map\n */\nclass MapView extends React.Component {\n\n    state = {\n        location: {\n            latitude: 0,\n            longitude: 0\n        }\n    };\n\n    /**\n     * Constructs the component with initial properties\n     * @param {Object} props Initial properties\n     */\n    constructor(props){\n        super(props);\n\n        this.olMap = null;\n        this.olPathLayer = null;\n        this.olStopsLayer = null;\n    }\n\n    /**\n     * Starts predicting the user's location on the path\n     * in regular intervals\n     */\n    startPredictedLocationWatch = () => {\n        if (this.liveLocationWatch){\n            this.stopLiveLocationWatch();\n        }\n\n        this.liveLocationWatch = setInterval(() => {\n            let currentTimeInSeconds = getTimeInSeconds(getCurrentTime());\n\n            if (this.props.stops && this.props.stops.length > 1){\n                let stops = this.props.stops;\n                let path = this.props.path;\n                let lastStop = stops[stops.length - 1];\n\n                if (currentTimeInSeconds <= lastStop.time) {\n                    let predictedLocation = getLocationOnPath(stops, path, currentTimeInSeconds);\n\n                    this.setState((prevState, props) => {\n                        return {\n                            ...prevState,\n                            location: {\n                                latitude: predictedLocation.lat,\n                                longitude: predictedLocation.long\n                            }\n                        };\n                    });\n                }\n            }\n        });\n    }\n\n    /**\n     * Stops tracking the user's location on the path\n     */\n    stopLiveLocationWatch = () => {\n        if (this.liveLocationWatch){\n            clearInterval(this.liveLocationWatch);\n            this.liveLocationWatch = null;\n        }\n    }\n\n    /**\n     * Creates and returns a new OpenLayers layer\n     * which will display the stops\n     * @returns {OlVectorLayer} Returns a Vector Layer that will display the stops.\n     */\n    createStopsLayer = () => {\n        var stopsStyle = new OlStyle({\n            image: new OlCircleStyle({\n                radius: 5,\n                fill: null,\n                stroke: new Stroke({\n                    color: \"red\",\n                    width: 1\n                })\n            })\n        });\n\n        var stopsStyleFunction = function(feature){\n            return stopsStyle;\n        };\n\n        var stopsLayer = new OlVectorLayer({\n            source: new OlVectorSource(),\n            style: stopsStyleFunction\n        });\n\n        return stopsLayer;\n    }\n\n    /**\n     * Updates the stops layer with new stops.\n     * It will clear the existing stops and render the new stops.\n     * \n     * If this.olStopsLayer is not set, it will not render the new stops.\n     * It will render the path on this.olStopsLayer.\n     * \n     * @param {Object} newStops The new stops\n     */\n    updateStopsLayer = (newStops) => {\n        let stopsGeoJsonObjects = newStops.map(item => {\n            return {\n                \"type\": \"Feature\",\n                \"geometry\": {\n                    \"type\": \"Point\",\n                    \"coordinates\": fromLonLat([item.long, item.lat])\n                }\n            };\n        });\n\n        let geoJsonObject = {\n            \"type\": \"FeatureCollection\",\n            \"crs\": {\n                \"type\": \"name\",\n                \"properties\": {\n                    \"name\": \"EPSG:3857\"\n                }\n            },\n            \"features\": stopsGeoJsonObjects\n        };\n\n        if (this.olStopsLayer){\n            let source = this.olStopsLayer.getSource();\n\n            if (source){\n                source.clear();\n                source.addFeatures((new OlGeoJSON()).readFeatures(geoJsonObject));\n                source.refresh();\n            }\n        }\n    }\n\n    /**\n     * Creates and returns a new OpenLayers layer\n     * which will display the path of the trip\n     * @returns {OlVectorLayer} Returns a Vector Layer that will display the path of the trip.\n     */\n    createPathLayer = () => {\n        var pathStyle = new OlStyle({\n            stroke: new OlStroke({\n                color: \"green\",\n                width: 3\n            })\n        });\n\n        var pathStyleFunction = function(feature) {\n            return pathStyle;\n        };\n\n        var pathLayer = new OlVectorLayer({\n            source: new OlVectorSource(),\n            style: pathStyleFunction\n        });\n\n        return pathLayer;\n    }\n\n    /**\n     * Updates the path layer with a new path.\n     * It will clear the existing path and render the new path.\n     * \n     * If this.olPathLayer is not set, it will not render the new path.\n     * It will render the path on this.olPathLayer.\n     * \n     * @param {Object} newPath The new path\n     */\n    updatePathLayer = (newPath) => {\n        let pathCoordinates = newPath.map(item => {\n            return fromLonLat([item.long, item.lat]);\n        });\n\n        let geoJsonObject = {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"LineString\",\n                \"coordinates\": pathCoordinates\n            }\n        };\n\n        if (this.olPathLayer){\n            let source = this.olPathLayer.getSource();\n\n            if (source){\n                source.clear();\n                source.addFeature((new OlGeoJSON()).readFeature(geoJsonObject));\n                source.refresh();\n            }\n        }\n    }\n\n    /**\n     * Creates the user's location layer on a path\n     * for the OLMap\n     */\n    createLiveLocationLayer = () => {\n        var liveLocationStyle = new OlStyle({\n            image: new OlCircleStyle({\n                radius: 10,\n                fill: null,\n                stroke: new Stroke({\n                    color: \"blue\",\n                    width: 2\n                })\n            })\n        });\n        var liveLocationStyleFunction = function(feature) {\n            return liveLocationStyle;\n        };\n\n        var liveLocationLayer = new OlVectorLayer({\n            source: new OlVectorSource(),\n            style: liveLocationStyleFunction\n        });\n\n        return liveLocationLayer;\n    }\n\n    /**\n     * Updates the user's location on the path\n     * @param {Number} newLatitude The user's latitude\n     * @param {Number} newLongitude The user's longitude\n     */\n    updateLiveLocationLayer = (newLatitude, newLongitude) => {\n        let geoJsonObject = {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": fromLonLat([newLongitude, newLatitude])\n            }\n        };\n\n        if (this.olLiveLocationLayer){\n            let source = this.olLiveLocationLayer.getSource();\n\n            if (source){\n                source.clear();\n                source.addFeature((new OlGeoJSON()).readFeature(geoJsonObject));\n                source.refresh();\n            }\n        }\n    }\n\n    /**\n     * This method gets called whenever the HTML elements in this component is already \n     * in the DOM.\n     * \n     * It will create an initial view of the OpenLayers map as well as setting up\n     * the required layers.\n     */\n    componentDidMount(){               \n        // Create the view for the map\n        let initialLatitude = 0;\n        let initialLongitude = 0;\n        let mapZoom = 2;\n        this.olView = new OlView({\n            center: fromLonLat([initialLongitude, initialLatitude]),\n            zoom: mapZoom\n        });\n\n        this.olPathLayer = this.createPathLayer();\n        this.olStopsLayer = this.createStopsLayer();\n        this.olLiveLocationLayer = this.createLiveLocationLayer();\n\n        // Initialize the map\n        this.olMap = new OlMap({\n            target: \"map\",\n            layers: [\n                new OlTileLayer({\n                    source: new OlOSM()\n                }),\n                this.olPathLayer,\n                this.olStopsLayer,\n                this.olLiveLocationLayer\n            ],\n            loadTilesWhileAnimating: true,\n            view: this.olView\n        });\n\n        this.startPredictedLocationWatch();\n    }\n\n    /**\n     * This method gets called right before the component becomes dismounted.\n     */\n    componentWillMount(){\n        this.stopLiveLocationWatch();\n    }\n    \n    /**\n     * This method gets called whenever the component updates.\n     * \n     * @param {Object} nextProps The new set of properties\n     * @param {Object} nextState The new set of states\n     */\n    componentWillUpdate(nextProps, nextState){\n        this.updateDimensions();\n        this.updateMap(this.props, nextProps, this.state, nextState);\n    }\n\n    /**\n     * This method will prevent the OpenLayers map from being\n     * deconstructed and re-instantiated and instead update the \n     * stops and the path displayed on the map.\n     * \n     * @param {Object} oldProps The component's old set of properties\n     * @param {Object} newProps The component's new set of properties\n     * @param {Object} oldState The component's old set of states\n     * @param {Object} newState The component's new set of states\n     */\n    updateMap = (oldProps, newProps, oldState, newState) => {\n        if (this.olMap){\n            let newViewOptions = {};\n\n            let tripDetailsAdded = oldProps && newProps && oldProps.path === null && newProps.path !== null;\n            let tripDetailsRemoved = oldProps && newProps && oldProps.path !== null && newProps.path === null;\n            \n            if (tripDetailsAdded){\n                let sumOfAllPathLatitudes = newProps.path.reduce((curSum, item) => curSum + item.lat, 0);\n                let sumOfAllPathLongitudes = newProps.path.reduce((curSum, item) => curSum + item.long, 0);\n                let midPathLatitude = sumOfAllPathLatitudes / newProps.path.length;\n                let midPathLongitude = sumOfAllPathLongitudes / newProps.path.length;\n\n                newViewOptions.center = fromLonLat([midPathLongitude, midPathLatitude]);\n                newViewOptions.duration = 2000;\n                newViewOptions.zoom = 13;\n                \n            }\n            else if (tripDetailsRemoved){\n                newViewOptions.center = fromLonLat([0, 0]);\n                newViewOptions.duration = 2000;\n                newViewOptions.zoom = 2;\n            }\n\n            if (newViewOptions !== {}){\n                this.olView.animate(newViewOptions);\n            }\n\n            if (newProps && newProps.path && newProps.stops){\n                this.updatePathLayer(newProps.path);\n                this.updateStopsLayer(newProps.stops);\n            }\n\n            let curLatitude = newState.location.latitude;\n            let curLongitude = newState.location.longitude;\n            this.updateLiveLocationLayer(curLatitude, curLongitude);\n        }\n    };\n\n    /**\n     * This method is called whenever the component's dimensions changes.\n     * Specifically, it will re-compute the size for the OpenLayers map.\n     */\n    updateDimensions() {\n\n        // Reason for creating a timeout was described at:\n        // https://gis.stackexchange.com/questions/31409/openlayers-redrawing-map-after-container-resize\n        setTimeout(() => { \n            this.olMap.updateSize();\n        }, 200);\n    }\n\n    /**\n     * This method gets called whenever React wants to re-render the component.\n     */\n    render() {\n        return (<div id=\"map\" className=\"map\"></div>);\n    }\n}\n\n/**\n * Maps the store's state with this component's properties\n * @param {Object} state The store's state\n */\nfunction mapStateToProps(state) {\n\n    let stops = state.selectedTrip.tripDetails ? state.selectedTrip.tripDetails.stops : null;\n    let path = state.selectedTrip.tripDetails ? state.selectedTrip.tripDetails.path : null;\n    let type = state.selectedTrip.tripDetails ? state.selectedTrip.tripDetails.type : null;\n\n    return {\n        stops: stops,\n        path: path,\n        type: type\n    };\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapView);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { \n    createAlarm, \n    deleteAlarm \n} from \"../../actions/alarm-actions\";\nimport { createNotification } from \"../../actions/notification-actions\";\nimport { getFormattedTime, getTimeInSeconds } from \"../../services/TimeFormatter\";\nimport { getCurrentTime } from \"../../services/MockedTimeService\";\n\nimport \"./RouteDetailsView.css\";\n\nclass RouteDetailsView extends React.Component {\n\n    state = {\n        lastUpdated: -1,\n\n        // Stop to be rendered to the UI\n        stops: [],\n\n        // A mapping from stop index to the time it will be dispatched\n        stopsWithAlarms: {}     \n    };\n\n    /**\n     * Update the stops in the component's state so that it will have\n     * the accurate remaining time.\n     */\n    updateStops = () => {\n        let currentTime = getTimeInSeconds(getCurrentTime());\n\n        // Update only if the time has changed.\n        if (currentTime > this.state.lastUpdated){\n\n            // Get the stops that did not pass by and calculate its remaining time.\n            let updatedStops = this.props.stops\n                .map((stop, index) => {\n                    return {\n                        ...stop,\n                        stopIndex: index\n                    };\n                })\n                .filter(stop => stop.time > currentTime)\n                .map(stop => {\n                    let timeRemaining = stop.time - currentTime;\n                    let formattedRemainingTime = getFormattedTime(timeRemaining);\n                    let hasAlarm = this.props.alarms[stop.time] !== undefined;\n\n                    return {\n                        ...stop,\n                        remainingTime: formattedRemainingTime,\n                        hasAlarm: hasAlarm\n                    };\n                });\n\n            // Update the formatted stops and the time this method was called.\n            this.setState((prevState, props) => {\n                return {\n                    lastUpdated: currentTime,\n                    stops: updatedStops\n                };\n            });  \n        }\n    };\n\n    addAlarm = (stopIndex) => {\n        let stop = this.props.stops[stopIndex];\n        let currentTime = getTimeInSeconds(getCurrentTime());\n        let dispatchTime = Math.max(stop.time - 300, currentTime);\n\n        if (dispatchTime > currentTime){\n            this.props.createAlarm(dispatchTime, () => {\n                let currentTime = getTimeInSeconds(getCurrentTime());\n                let remainingTime = stop.time - currentTime;\n                let formattedRemainingTime = getFormattedTime(remainingTime);\n\n                let message = `You are ${formattedRemainingTime.value} ` + \n                    `${formattedRemainingTime.unit} away from ${stop.name}`;\n\n                let duration = 10000;\n\n                this.props.createNotification(message, duration);\n                \n                let newStopsWithAlarms = Object.assign({}, this.state.stopsWithAlarms);\n                delete newStopsWithAlarms[stopIndex];\n    \n                this.setState((prevState, prevProps) => {\n                    return {\n                        ...prevState,\n                        stopsWithAlarms: newStopsWithAlarms\n                    };\n                });\n            });\n\n            let message = `You will be notified 5 minutes before reaching ${stop.name}`;\n            this.props.createNotification(message, 10000);\n\n            let newStopsWithAlarms = Object.assign({}, this.state.stopsWithAlarms);\n            newStopsWithAlarms[stopIndex] = dispatchTime;\n\n            this.setState((prevState, prevProps) => {\n                return {\n                    ...prevState,\n                    stopsWithAlarms: newStopsWithAlarms\n                };\n            });\n        }\n        else {\n            let remainingTime = stop.time - currentTime;\n            let formattedRemainingTime = getFormattedTime(remainingTime);\n\n            let message = `You are ${formattedRemainingTime.value} ` + \n                `${formattedRemainingTime.unit} away from ${stop.name}`;\n\n            let duration = 10000;\n\n            this.props.createNotification(message, duration);\n        }\n    };\n\n    removeAlarm = (stopIndex) => {\n        let dispatchTime = this.state.stopsWithAlarms[stopIndex];\n        this.props.deleteAlarm(dispatchTime);\n\n        let newStopsWithAlarms = Object.assign({}, this.state.stopsWithAlarms);\n        delete newStopsWithAlarms[stopIndex];\n\n        let stop = this.props.stops[stopIndex];\n        let message = `Removed notification for ${stop.name}`;\n        this.props.createNotification(message, 10000);\n\n        this.setState((prevState, prevProps) => {\n            return {\n                ...prevState,\n                stopsWithAlarms: newStopsWithAlarms\n            };\n        });\n    };\n\n    onAlarmButtonClick = (stopIndex) => {\n        if (this.state.stopsWithAlarms[stopIndex]){\n            this.removeAlarm(stopIndex);\n        } \n        else {\n            this.addAlarm(stopIndex);\n        }\n    };\n    \n    componentDidMount() {\n        this.timer = setInterval(this.updateStops);\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.timer);\n        this.timer = null;\n    }\n\n    /**\n     * Creates a list item displaying stop information which is used\n     * to be placed in the list.\n     * \n     * The \"stop\" param is an object with this format:\n     * {\n     *      name: <The name of the stop>,\n     *      remainingTime: {\n     *          value: <The # for the remaining time left>,\n     *          unit: <The unit of value for the remaining time left>     \n     *      },\n     *      hasAlarm: <A boolean where if it has an alarm on it or not>\n     * }\n     */\n    renderListItem = (stop) => (\n        <div key={stop.stopIndex} className=\"stop-container\">\n            <div className=\"stop-info-container\">\n                <div className=\"stop-name\">{stop.name}</div>\n\n                <div className=\"remaining-time\">\n                    <div className=\"remaining-time-value\">{stop.remainingTime.value}</div>\n                    <div className=\"remaining-time-unit\">{stop.remainingTime.unit}</div>\n                </div>\n            </div>\n            <div className=\"stop-interactions-container\">\n                <div className=\"stop-interactions\">\n                    <div className={\n                        this.state.stopsWithAlarms[stop.stopIndex] !== undefined ? \n                              \"stop-interaction-button stop-interaction-button-selected\" \n                            : \"stop-interaction-button\"}\n                        onClick={() => this.onAlarmButtonClick(stop.stopIndex)}>\n                        Notify me\n                    </div>\t\t\t\t\n                </div>\n            </div>\n        </div>\n    );\n\n    render(){\n        let stopListItems = this.state.stops\n            .map((stop) => this.renderListItem(stop));\n\n        return (\n            <div>\n                <div className=\"trip-header-details-container\">\n                    <div className=\"trip-header-details\">\n                        <h3 className=\"short-name\">{this.props.tripShortName}</h3>\n                        <p className=\"long-name\">{this.props.tripLongName}</p>\n                    </div>\n                </div>\n                <div className=\"stop-containers-list\">\n                    {stopListItems}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state){\n    return {\n        tripShortName: state.selectedTrip.tripDetails.shortName,\n        tripLongName: state.selectedTrip.tripDetails.longName,\n        tripHeadSign: state.selectedTrip.tripDetails.headSign,\n        stops: state.selectedTrip.tripDetails.stops,\n        alarms: state.alarms.alarms\n    };\n}\n\nconst mapDispatchToProps = {\n    createAlarm: createAlarm,\n    deleteAlarm: deleteAlarm,\n    createNotification: createNotification\n};\n \n\nexport default connect(mapStateToProps, mapDispatchToProps)(RouteDetailsView);","import { types } from \"../constants/alarm-constants\";\n\nexport const createAlarm = (time, dispatcher) => {\n    return {\n        type: types.CREATE_NEW_ALARM,\n        payload: {\n            time: time,\n            dispatcher: dispatcher\n        }\n    };\n}\n\nexport const deleteAlarm = (time) => {\n    return {\n        type: types.DELETE_ALARM,\n        payload: {\n            time: time\n        }\n    };\n}\n\nexport const startAlarm = () => {\n    return {\n        type: types.START_ALARM\n    };\n}\n\nexport const stopAlarm = () => {\n    return {\n        type: types.STOP_ALARM\n    };\n}","import { types } from \"../constants/notification-constants\";\n\nexport const createNotification = (message, duration) => {\n    return {\n        type: types.DISPATCH_NOTIFICATION,\n        payload: {\n            message: message,\n            duration: duration\n        }\n    };\n};\n\nexport const removeNotification = () => {\n    return {\n        type: types.REMOVE_NOTIFICATION\n    };\n};\n","import React from \"react\";\nimport \"./LoadingPopup.css\";\nimport \"./../popup/Popup.css\"\n\n/**\n * Renders the loading sign.\n */\nclass LoadingPopup extends React.Component {\n\n    render() {\n        return (\n            <div className=\"popup-background\">\n                <div className=\"popup-container\">\n                    <div className=\"popup\">\n                        <div className=\"popup-header\"></div>\n                        <div className=\"popup-contents\">\n                            <div className=\"loader\">\n                                <div></div>\n                                <div></div>\n                                <div></div>\n                                <div></div>\n                                <div></div>\n                                <div></div>\n                                <div></div>\n                                <div></div>\n                                <div></div>\n                            </div>\n                            <h2 className=\"loading-sign\">Loading...</h2>\n                        </div>\n                        <div className=\"popup-actions-container\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LoadingPopup;\n","export const types = {\n    FETCH_NEARBY_TRIPS: \"route-chooser/FETCH_NEARBY_TRIPS\",\n    FETCH_NEARBY_TRIPS_IN_PROGRESS: \"route-chooser/FETCH_NEARBY_TRIPS_IN_PROGRESS\",\n    FETCH_NEARBY_TRIPS_SUCCESS: \"route-chooser/FETCH_NEARBY_TRIPS_SUCCESS\",\n    FETCH_NEARBY_TRIPS_FAILURE: \"route-chooser/FETCH_NEARBY_TRIPS_FAILURE\"\n};","export const types = {\n    START_TRACKING_CURRENT_LOCATION: \"services/location/START_TRACKING_CURRENT_LOCATION\",\n    STOP_TRACKING_CURRENT_LOCATION: \"services/location/STOP_TRACKING_CURRENT_LOCATION\",\n    CURRENT_LOCATION_CHANGED: \"services/location/CURRENT_LOCATION_CHANGED\"\n};","export const types = {\n\tFETCH_TRIP_DETAILS: \"select-trip/FETCH_TRIP_DETAILS\",\n\tFETCH_TRIP_DETAILS_IN_PROGRESS: \"select-trip/FETCH_TRIP_DETAILS_IN_PROGRESS\",\n\tFETCH_TRIP_DETAILS_SUCCESS: \"select-trip/FETCH_TRIP_DETAILS_SUCCESS\",\n\tFETCH_TRIP_DETAILS_FAILURE: \"select-trip/FETCH_TRIP_DETAILS_FAILURE\"\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./RouteChooserPopup.css\";\nimport \"./../popup/Popup.css\"\nimport LoadingPopup from \"../loading-popup/LoadingPopup\";\nimport { getCurrentTime } from \"../../services/MockedTimeService\";\nimport { getNearbyTrips } from \"../../actions/nearby-trips-actions\";\nimport { startTrackingLocation, stopTrackingLocation } from \"../../actions/geolocation-actions\";\nimport { getTripDetails } from \"../../actions/select-trip-actions\";\n\n/**\n * This is a module used to ask users to pick a nearby trip.\n */\nclass NearbyTripsChooserPopup extends React.Component {\n\n    componentDidMount(){\n        this.props.startTrackingLocation();\n    }\n\n    componentWillUnmount(){\n        this.props.stopTrackingLocation();\n    }\n    \n    componentWillUpdate(nextProps, nextState){\n        const isLocationChanged = (this.props.latitude !== nextProps.latitude) || \n                                  (this.props.longitude !== nextProps.longitude) || \n                                  (this.props.radius !== nextProps.radius);\n\n        if (isLocationChanged){\n            let currentTime = getCurrentTime().toLocaleTimeString();\n            this.props.getNearbyTrips(43.5540, -79.72208, currentTime, nextProps.radius);\n            return false;\n        }\n\n        return true;\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        let checkboxValue = event.target.route.value;\n        let tokenizedCheckboxValue = checkboxValue.split(\"/\");\n        let selectedTripID = tokenizedCheckboxValue[0];\n        let selectedScheduleID = tokenizedCheckboxValue[1];\n\n        this.props.selectTrip(selectedTripID, selectedScheduleID);\n    }\n\n    renderLoadingSign = () => (\n        <LoadingPopup />\n    );\n\n    renderNoNearbyTripsPopup = () => (\n        <div className=\"popup-background\">\n            <div className=\"popup-container\">\n                <div className=\"popup\">\n                    <div className=\"popup-header\">\n                        <div>\n                            <h3>There are no busses / trains near you!</h3>\n                            <p>Are you on a bus / train? If not, this explains why we cannot find your bus / train!</p>\n                        </div>\n                    </div>\n                    <div className=\"popup-contents\">\n                        <p>Please wait while we try to determine the busses / trains around you.</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n    renderNearbyTripsPopup = () => (\n        <div className=\"popup-background\">\n            <div className=\"popup-container\">\n                <div className=\"popup\">\n                    <div className=\"popup-header\">\n                       <div>\n                            <h3>Which bus / train are you on?</h3>\n                            <p>\n                                There are multiple bus / train routes near your area. \n                                Please select which route you are currently on.\n                            </p>\n                        </div>   \n                    </div>\n                    <form onSubmit={this.handleSubmit}>\n                        <div className=\"popup-contents\">{\n                            Object.keys(this.props.nearbyTrips).map(tripID => {\n                                let trip = this.props.nearbyTrips[tripID];\n                                let shortName = trip.shortname;\n                                let longName = trip.longname;\n                                let headsign = trip.headsign;\n                                let schedules = trip.schedules;\n\n                                return schedules.map(scheduleID => {\n                                    let display = \"\";\n                                    if (shortName){\n                                        display += shortName + \" \";\n                                    }\n                                    if (headsign){\n                                        display += headsign + \" \";\n                                    }\n                                    if (longName){\n                                        display += \"(\" + longName + \")\";\n                                    }\n                                    display.trim();\n\n                                    let checkboxValue = tripID + \"/\" + scheduleID;\n            \n                                    return (\n                                        <div key={checkboxValue}>\n                                            <input type=\"radio\" name=\"route\" value={checkboxValue}/>\n                                            <div className=\"tripInfo\">{display}</div>\n                                        </div>\n                                    );\n                                });\n                            })\n                        }</div>\n                        <div className=\"popup-actions-container\">\n                            <button className=\"popup-action-button\" type=\"submit\">\n                                OK\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n\n    render() {\n        if (this.props.nearbyTripsInProgress || this.props.selectedTripsInProgress){\n            return this.renderLoadingSign();         \n        } \n        else if (Object.keys(this.props.nearbyTrips).length === 0) {\n            return this.renderNoNearbyTripsPopup();            \n        } \n        else {\n            return this.renderNearbyTripsPopup();\n        }\n    }\n}\n\nfunction mapStateToProps(state){\n    return {\n        nearbyTrips: state.nearbyTrips.tripIDs,\n        nearbyTripsInProgress: state.nearbyTrips.inProgress,\n        selectedTripsInProgress: state.selectedTrip.inProgress,\n        latitude: state.currentLocation.latitude,\n        longitude: state.currentLocation.longitude,\n        radius: state.currentLocation.radius\n    };\n}\n\nconst mapDispatchToProps = {\n    getNearbyTrips: getNearbyTrips,\n    selectTrip: getTripDetails,\n    startTrackingLocation: startTrackingLocation,\n    stopTrackingLocation: stopTrackingLocation\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NearbyTripsChooserPopup);\n","import { types } from \"../constants/nearby-trips-constants\";\n\nexport function getNearbyTrips(latitude, longitude, time, radius){\n    return {\n        type: types.FETCH_NEARBY_TRIPS,\n        payload: {\n            latitude: latitude,\n            longitude: longitude,\n            time: time,\n            radius: radius\n        }\n    };\n}","import { types } from \"../constants/select-trip-constants\"; \n\nexport const getTripDetails = (tripID, scheduleID) => {\n    return {\n        type: types.FETCH_TRIP_DETAILS,\n        payload: {\n            tripID: tripID,\n            scheduleID: scheduleID\n        }\n    };\n};","import { types } from \"../constants/geolocation-constants\";\n\nexport function startTrackingLocation(){\n    return {\n        type: types.START_TRACKING_CURRENT_LOCATION\n    };\n}\n\nexport function stopTrackingLocation(){\n    return {\n        type: types.STOP_TRACKING_CURRENT_LOCATION\n    };\n}","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { startAlarm, stopAlarm } from \"../../actions/alarm-actions\";\nimport { removeNotification } from \"../../actions/notification-actions\";\n\nimport \"./App.css\";\nimport Map from \"../map-view/MapView\";\nimport RouteDetailsView from './../route-details-view/RouteDetailsView';\nimport RouteChooserPopup from \"./../route-chooser-popup/RouteChooserPopup\";\n\n/**\n * A React component that holds the entire app.\n */\nclass App extends React.Component {\n\n    /**\n     * This method gets called when the component mounts to\n     * the DOM\n     */\n    componentDidMount(){       \n        if (!(\"Notification\" in window)){\n            alert(\"Notifications are not supported in this browser!\");\n        }\n\n        Notification.requestPermission();\n        this.props.startAlarm();\n    }\n\n    /**\n     * This method gets called when the component unmounts\n     * from the DOM\n     */\n    componentWillUnmount(){\n        this.props.stopAlarm();\n    }\n\n    /**\n     * Dispatches the notification on both the web notification\n     * and on the toast.\n     */\n    dispatchNotification = (message, duration) => {\n\n        // Dispatch the web notification container\n        Notification.requestPermission()\n            .then((permission) => {\n                if (permission !== \"granted\"){\n                    throw new Error(\"No access!\");\n                }\n            })\n            .then(() => {\n                let notification = new Notification(message);\n\n                // Close the notification after 10 seconds\n                setTimeout(() => {\n                    notification.close();\n                }, duration);\n            })\n            .catch(() => {\n                console.log(\"We have no access here!\");\n            });\n\n        // Notifiy the user via the toast UI\n        toast(message, {\n            position: toast.POSITION.BOTTOM_CENTER\n        });\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        if (this.props.notifications.text !== null){\n            let message = this.props.notifications.text;\n            let duration = this.props.notifications.duration;\n\n            this.dispatchNotification(message, duration);\n        }\n        \n        return (\n            <div className=\"app-container\">\n                {\n                    this.props.displayTripDetails \n                        ? <div className=\"left-panel\">\n                            <RouteDetailsView />\n                         </div>\n                        : null\n                }\n                <div className=\"right-panel\">\n                    <Map />\n                </div>\t\n                {\n                    this.props.displayTripDetails\n                        ? null\n                        : <RouteChooserPopup/>\n                }\n                <ToastContainer />\n            </div>\n        )\n    }\n}\n\n/**\n * Maps part of the store's state to this component\n * @param {Object} state The store's state\n */\nfunction mapStateToProps(state){\n    return {\n        displayTripDetails: state.selectedTrip.tripID !== null,\n        notifications: {\n            text: state.notifications.text,\n            duration: state.notifications.duration\n        }\n    };\n}\n\nconst mapDispatchToProps = {\n    startAlarm: startAlarm,\n    stopAlarm: stopAlarm,\n    removeNotification: removeNotification\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import Axios from \"axios\";\nAxios.defaults.timeout = 180000;\n\nconst TRIPS_LOCATOR_URL = \"https://on-transit-app-api-gateway.herokuapp.com/api/v1/trips\";\nconst TRIP_DETAILS_URL = \"https://on-transit-app-api-gateway.herokuapp.com/api/v1/trips\";\nconst VEHICLES_LOCATOR_URL = \"https://on-transit-app-api-gateway.herokuapp.com/api/v1/vehicles\";\n\nexport async function getNearbyTrips(latitude, longitude, time, radius){\n    try{\n        let urlParams = {\n            lat: latitude,\n            long: longitude,\n            time: time,\n            radius: radius\n        };\n        let options = {\n            params: urlParams\n        };\n\n        let rawData = await Axios.get(TRIPS_LOCATOR_URL, options);\n        return rawData.data.data;\n    }\n    catch(error){\n        throw error;\n    }\n}\n\nexport async function getTripDetails(tripID, scheduleID){\n    try{\n        let url = TRIP_DETAILS_URL + \"/\" + tripID + \"/schedules/\" + scheduleID;\n        let rawData = await Axios.get(url);\n        return rawData.data.data;\n    }\n    catch(error){\n        throw error;\n    }\n}\n\nexport async function getNearbyVehicles(latitude, longitude, radius){\n    try{\n        let urlParams = {\n            lat: latitude,\n            long: longitude,\n            radius: radius\n        };\n        let options = {\n            params: urlParams\n        };\n        let rawData = await Axios.get(VEHICLES_LOCATOR_URL, options);\n        return rawData.data.data;\n    }\n    catch(error){\n        throw error;\n    }\n}\n","import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { types } from \"../constants/nearby-trips-constants\";\nimport { getNearbyTrips as getNearbyTripsByAPI } from \"../services/OnTransitService\";\n\nfunction* getNearbyTrips({ payload }){\n    let latitude = payload.latitude;\n    let longitude = payload.longitude;\n    let time = payload.time;\n    let radius = payload.radius;\n\n    yield put({type: types.FETCH_NEARBY_TRIPS_IN_PROGRESS });\n\n    try{\n        let result = yield call(getNearbyTripsByAPI, latitude, longitude, time, radius);\n        yield put({type: types.FETCH_NEARBY_TRIPS_SUCCESS, payload: result });\n    }\n    catch(error){\n        yield put({type: types.FETCH_NEARBY_TRIPS_FAILURE });\n    }\n}\n\nexport default function*(){\n    yield takeLatest(types.FETCH_NEARBY_TRIPS, getNearbyTrips);\n}","\nconst watchOptions = {\n    enableHighAccuracy: true,\n    timeout: Infinity,\n    maximumAge: 0\n}\n\nvar locationWatch = null;\n\n/**\n * Starts the location watch if it is not started already.\n * The 'callbacks' object defines a set of callbacks in this format:\n * {\n *      onSuccess: <CALLBACK_1>,\n *      onError: <CALLBACK_2>\n * }\n * \n * @param {Object} callbacks A set of callbacks\n */\nexport function startLocationWatch(callbacks){\n    let onSuccess = callbacks.onSuccess;\n    let onError = callbacks.onError;\n    \n    if (!locationWatch){\n        locationWatch = navigator.geolocation.watchPosition(\n            onSuccess, onError, watchOptions);\n    }\n}\n\nexport function stopLocationWatch(){\n   if (locationWatch){\n        clearInterval(locationWatch);\n    }\n}","import { call, takeLatest } from \"redux-saga/effects\";\nimport { types } from \"../constants/geolocation-constants\";\nimport { stopLocationWatch, startLocationWatch } from \"../services/GeolocationTracker\";\nimport { store } from \"../store/store\";\n\nfunction onLocationChangedSuccess(position){\n    let latitude = position.coords.latitude;\n    let longitude = position.coords.longitude;\n    let radius = position.coords.accuracy;\n\n    let payloadObj = {\n        latitude: latitude,\n        longitude: longitude,\n        radius: radius\n    };\n    store.dispatch({type: types.CURRENT_LOCATION_CHANGED, payload: payloadObj});\n}\n\nfunction onLocationChangedError(error){\n    console.error(error);\n}\n\nfunction* startTrackingLocation(){\n    let watchCallbacks = {\n        onSuccess: onLocationChangedSuccess,\n        onError: onLocationChangedError\n    };\n    yield call(startLocationWatch, watchCallbacks);\n}\n\nfunction* stopTrackingLocation(){\n    yield call(stopLocationWatch);\n}\n\nexport default function*(){\n    yield takeLatest(types.START_TRACKING_CURRENT_LOCATION, startTrackingLocation);\n    yield takeLatest(types.STOP_TRACKING_CURRENT_LOCATION, stopTrackingLocation);\n}","import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { types } from \"../constants/select-trip-constants\";\nimport { getTripDetails as getTripDetailsFromApi } from \"../services/OnTransitService\";\n\nfunction* getTripDetails({ payload }){\n    let tripID = payload.tripID;\n    let scheduleID = payload.scheduleID;\n\n    yield put({ type: types.FETCH_TRIP_DETAILS_IN_PROGRESS });\n\n    try{\n        let tripDetails = yield call(getTripDetailsFromApi, tripID, scheduleID);\n        let payload = {\n            tripDetails: tripDetails,\n            tripID: tripID,\n            scheduleID: scheduleID\n        }\n        yield put({ type: types.FETCH_TRIP_DETAILS_SUCCESS, payload: payload });\n    }\n    catch(error){\n        yield put({ type: types.FETCH_TRIP_DETAILS_FAILURE, payload: error });\n    }\n}\n\nexport default function*(){\n    yield takeLatest(types.FETCH_TRIP_DETAILS, getTripDetails);\n}","export const createReducer = (initialState, actionHandlers) => {\n    return (state = initialState, action) => {\n        if (actionHandlers.hasOwnProperty(action.type)) {\n            return actionHandlers[action.type](state, action)\n        } \n        else {\n            return state\n        }\n    }\n}","import { createReducer } from \"../utils/CreateReducer\";\nimport { types } from \"../constants/nearby-trips-constants\";\n\nconst initialState = {\n    inProgress: true,\n    tripIDs: {},\n    error: null\n};\n\nconst onProgress = (state, { payload }) => {\n    return {\n        ...state,\n        inProgress: true\n    };\n};\n\nconst onSuccess = (state, { payload }) => {\n    return {\n        ...state,\n        inProgress: false,\n        tripIDs: payload.tripIDs,\n        error: null\n    };\n};\n\nconst onFailure = (state, { payload }) => {\n    return {\n        ...state,\n        inProgress: false,\n        tripIDs: {},\n        error: payload\n    };\n};\n\nexport default createReducer(initialState, {\n    [types.FETCH_NEARBY_TRIPS_IN_PROGRESS]: onProgress,\n    [types.FETCH_NEARBY_TRIPS_SUCCESS]: onSuccess,\n    [types.FETCH_NEARBY_TRIPS_FAILURE]: onFailure\n});\n","import { createReducer } from \"../utils/CreateReducer\";\nimport { types } from \"../constants/geolocation-constants\";\n\nconst initialState = {\n    latitude: 43.553178,\n    longitude: -79.723189,\n    radius: 0\n};\n\nconst onLocationChanged = (state, { payload }) => {\n    let newLatitude = payload.latitude;\n    let newLongitude = payload.longitude;\n    let radius = payload.radius;\n\n    return {\n        ...state,\n        latitude: newLatitude,\n        longitude: newLongitude,\n        radius: radius\n    };\n};\n\nexport default createReducer(initialState, {\n    [types.CURRENT_LOCATION_CHANGED]: onLocationChanged\n});\n","import { createReducer } from \"../utils/CreateReducer\";\nimport { types } from \"../constants/select-trip-constants\";\n\nconst initialState = {\n    inProgress: false,\n    tripID: null,\n    scheduleID: null,\n    tripDetails: null\n};\n\nconst onProgress = (state, { payload }) => {\n    return {\n        ...state,\n        inProgress: true\n    };\n};\n\nconst onSuccess = (state, { payload }) => {\n    return {\n        ...state,\n        inProgress: false,\n        error: null,\n        tripID: payload.tripID,\n        scheduleID: payload.scheduleID,\n        tripDetails: payload.tripDetails\n    };\n};\n\nconst onFailure = (state, { payload }) => {\n    return {\n        ...state,\n        inProgress: false,\n        error: payload.error\n    }\n};\n\nexport default createReducer(initialState, {\n    [types.FETCH_TRIP_DETAILS_IN_PROGRESS]: onProgress,\n    [types.FETCH_TRIP_DETAILS_SUCCESS]: onSuccess,\n    [types.FETCH_TRIP_DETAILS_FAILURE]: onFailure\n});\n","import {getCurrentTime} from \"./MockedTimeService\";\nimport { getTimeInSeconds } from \"./TimeFormatter\";\n\nvar alarmWatch = null;\nvar alarms = {};\n\nexport const startAlarm = () => {\n    if (!alarmWatch){\n        alarmWatch = setInterval(() => {\n            let curTime = getTimeInSeconds(getCurrentTime());\n            if (alarms[curTime] !== undefined){\n                alarms[curTime]();\n\n                deleteAlarm(curTime);\n            }\n        });\n    }\n};\n\nexport const stopAlarm = () => {\n    if (alarmWatch){\n        clearInterval(alarmWatch);\n    }\n};\n\nexport const addAlarm = (time, dispatcher) => {\n    if (alarms[time] === undefined){\n        alarms[time] = dispatcher;\n    }\n};\n\nexport const deleteAlarm = (time) => {\n    if (alarms[time]){\n        delete alarms[time];\n    }\n};\n\nexport const getAlarms = () => {\n    return alarms;\n};","import { \n    addAlarm, \n    deleteAlarm as deleteAlarmFromManager, \n    getAlarms, \n    startAlarm as startAlarmFromManager, \n    stopAlarm as stopAlarmFromManager \n} from \"../services/AlarmsManager\";\nimport { types } from \"../constants/alarm-constants\";\nimport { createReducer } from \"../utils/CreateReducer\";\n\nconst initialState = {\n    alarms: {},\n    isAlarmRunning: false\n};\n\nconst createAlarm = (state, { payload }) => {\n    let time = payload.time;\n    let dispatcher = payload.dispatcher;\n    addAlarm(time, dispatcher);\n\n    return {\n        ...state,\n        alarms: getAlarms()\n    };\n};\n\nconst deleteAlarm = (state, { payload }) => {\n    let time = payload.time;\n    let dispatcher = payload.dispatcher;\n    deleteAlarmFromManager(time, dispatcher);\n\n    return {\n        ...state,\n        alarms: getAlarms()\n    };\n};\n\nconst startAlarm = (state, action) => {\n    startAlarmFromManager();\n    return state;\n};\n\nconst stopAlarm = (state, action) => {\n    stopAlarmFromManager();\n    return state;\n};\n\nexport default createReducer(initialState, {\n    [types.CREATE_NEW_ALARM]: createAlarm,\n    [types.DELETE_ALARM]: deleteAlarm,\n    [types.START_ALARM]: startAlarm,\n    [types.STOP_ALARM]: stopAlarm\n});\n","import { createReducer } from \"../utils/CreateReducer\";\nimport { types } from \"../constants/notification-constants\";\n\nconst initialState = {\n    text: null,\n    duration: 0\n}\n\nconst dispatchNotification = (state, { payload }) => {\n    let message = payload.message;\n    let duration = payload.duration;\n\n    return {\n        ...state,\n        text: message,\n        duration: duration\n    };\n};\n\nconst removeNotification = (state, { payload }) => {\n    return {\n        text: null,\n        duration: null\n    };\n};\n\nexport default createReducer(initialState, {\n    [types.DISPATCH_NOTIFICATION]: dispatchNotification,\n    [types.REMOVE_NOTIFICATION]: removeNotification\n});\n","import { combineReducers } from \"redux\";\nimport nearbyTripsReducer from \"./nearby-trips-reducer\";\nimport currentLocationReducer from \"./geolocation-reducer\";\nimport selectedTripReducer from \"./select-trip-reducer\";\nimport alarmsReducer from \"./alarm-reducer\"; \nimport notificationsReducer from \"./notification-reducer\";\n\nexport default combineReducers({\n    nearbyTrips: nearbyTripsReducer,\n    selectedTrip: selectedTripReducer,\n\tcurrentLocation: currentLocationReducer,\n    alarms: alarmsReducer,\n    notifications: notificationsReducer\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from 'redux-saga'\nimport { all } from \"redux-saga/effects\";\nimport routeChooserSagas from \"../sagas/nearby-trips-sagas\";\nimport locationSagas from \"../sagas/geolocation-sagas\";\nimport selectTripSagas from \"../sagas/select-trip-sagas\";\nimport rootReducer from \"../reducers/root-reducer\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\nfunction* rootSagas(){\n    yield all([routeChooserSagas(), locationSagas(), selectTripSagas()]);\n};\n\nsagaMiddleware.run(rootSagas);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport App from './components/app/App';\nimport { store } from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}